# Assumes you have sc-make repo locally 
# and an env variable of $SC_MAKE_FSPATH pointing to the makefiles inside the sc-make repo.
# 
## example from $HOME/zshrc
#export SC_MAKE_FSPATH=/Users/apple/workspace/go/src/github.com/gedw99/sc-make/assets/.sc-make/make/

MAKE_FSPATH=$(SC_MAKE_FSPATH)
include $(MAKE_FSPATH)/help.mk
include $(MAKE_FSPATH)/git.mk

include $(MAKE_FSPATH)/caddy.mk

include $(MAKE_FSPATH)/overmind.mk

#include $(MAKE_FSPATH)/icns.mk
include $(MAKE_FSPATH)/hcloud.mk

include $(PWD)/batch.mk

export PATH:=$(PWD)/.bin/darwin-amd64:$(PATH)

### PROCESS

run-overmind:
	# start our services
	$(MAKE) OVERMIND_DAEMONIZE=1 OVERMIND_ANY_CAN_DIE=1 OVERMIND_SHOW_TIMESTAMPS=1 overmind-run
echo-overmind:
	# tap the daemons logs
	overmind echo
quit-overmind:
	# kill damein
	overmind quit

connect-overmind:
	overmind connect decksh
restart-overmind:
	overmind restart
stop-overmind:
	overmind stop

### FONTS
export DECKFONTS=$(PWD)/deckfonts/deckfonts__ajstarks

### EX

ex-test:
	cd $(PWD)/decksh/decksh__ajstarks && decksh test.dsh > test.xml
	
	# pdfdeck ( works )
	#cd $(PWD)/decksh/decksh__ajstarks && pdfdeck -sans NotoSans-Regular test.xml && open test.pdf

	# svgdeck ( works )
	#cd $(PWD)/decksh/decksh__ajstarks && svgdeck -sans NotoSans-Regular test.xml

	# gcdeck ( bursted )
	# page 8 or 9 it then pages forward non stop when you click. same as before.
	cd $(PWD)/decksh/decksh__ajstarks && gcdeck -pagesize A4 test.xml

ex-short:
	# need deck font. Fix that later
	# from $(PWD)/decksh/decksh__ajstarks/doc/mkdeck-short.sh
	#cd $(PWD)/decksh/decksh__ajstarks/doc && decksh decksh-short.dsh | pdfdeck $* -pagesize 800,450 -sans GillSans -mono NotoMono-Regular -serif GillSans-Italic -stdout - > decksh-short.pdf
	
	cd $(PWD)/decksh/decksh__ajstarks/doc && decksh decksh-short.dsh | pdfdeck $* -pagesize 800,450 -sans NotoSans-Regular -mono NotoMono-Regular -serif NotoMono-Regular -stdout - > decksh-short.pdf

	# wow its nice too.
	# links work 
	open $(PWD)/decksh/decksh__ajstarks/doc/decksh-short.pdf

VIZ_FSPATH=$(PWD)/deckviz/deckviz__ajstarks/bauhaus-lamp
VIZ_NAME=lamp

ex-viz:
	cd $(VIZ_FSPATH) && decksh $(VIZ_NAME).dsh | pdfdeck $* -pagesize 800,450 -sans NotoSans-Regular -mono NotoMono-Regular -serif NotoMono-Regular -stdout - > $(VIZ_NAME).pdf
	open $(VIZ_FSPATH)/$(VIZ_NAME).pdf

deckd:
	# try to use server and web gui, so we can quickly browse.

	# Its is ONLY designed for viewing already rednered to xml stuff
	deckd -dir $(VIZ_FSPATH) -listen localhost:8080
	# http://localhost:8080/

	# http://localhost:8080/deck/

animate:
	# see https://github.com/ajstarks/openvg/blob/master/go-client/clock/clock.go
	# Its shitty. think about it more.

users:
	# looks like i can use this to wrap the deck commands directly.
	# a NATS stream might be better as its more flexible.
	# Cool this will be that deckd web can show the output as stuff streams to the disk that deckd is looking at.
	# can add NATS to decks and signal it that a file has changed, and it can then tell web viewers via an event
	# Yomorun presence system using web sockets / web transprt to sent event about what changed, and then Web client pulls it.
	## its a bit like basic htmx. 
	# Its clean and simple
	# can transpprt xml and pds, etc via NAST obj store and out to disk where ever that stream leads to.
	
	# https://github.com/harmonicinc-com/joebot 
	# its actually works and can punch throw.
	

dev:
	## this is where we diff the udiff
	# can run nats leaf on each devs system so that we dont need to worry about hole punching.
	# again nast streams can do it.
	# nats or https://github.com/nf/nux/blob/main/dev.go#L17

plugins:
	# capsule 
	# devs / users can write plugins.
	# renderers to twitter, email, youtube, other. Mattermost has some.

ARGS=-address 127.0.0.1:8080 -verbose
FILE=$(PWD)/test.txt

# go
0:
	$(BIN_GO)
1:
	$(BIN_GO) -h
2:
	touch $(FILE)
	$(BIN_GO) $(ARGS) $(FILE)

# gio
10:
	open $(BIN_GIO)

